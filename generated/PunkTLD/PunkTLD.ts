// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class DataChanged extends ethereum.Event {
  get params(): DataChanged__Params {
    return new DataChanged__Params(this);
  }
}

export class DataChanged__Params {
  _event: DataChanged;

  constructor(event: DataChanged) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DefaultDomainChanged extends ethereum.Event {
  get params(): DefaultDomainChanged__Params {
    return new DefaultDomainChanged__Params(this);
  }
}

export class DefaultDomainChanged__Params {
  _event: DefaultDomainChanged;

  constructor(event: DefaultDomainChanged) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get defaultDomain(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class DomainBuyingToggle extends ethereum.Event {
  get params(): DomainBuyingToggle__Params {
    return new DomainBuyingToggle__Params(this);
  }
}

export class DomainBuyingToggle__Params {
  _event: DomainBuyingToggle;

  constructor(event: DomainBuyingToggle) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get domainBuyingToggle(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class DomainCreated extends ethereum.Event {
  get params(): DomainCreated__Params {
    return new DomainCreated__Params(this);
  }
}

export class DomainCreated__Params {
  _event: DomainCreated;

  constructor(event: DomainCreated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get fullDomainName(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ReferralFeeChanged extends ethereum.Event {
  get params(): ReferralFeeChanged__Params {
    return new ReferralFeeChanged__Params(this);
  }
}

export class ReferralFeeChanged__Params {
  _event: ReferralFeeChanged;

  constructor(event: ReferralFeeChanged) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get referralFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TldPriceChanged extends ethereum.Event {
  get params(): TldPriceChanged__Params {
    return new TldPriceChanged__Params(this);
  }
}

export class TldPriceChanged__Params {
  _event: TldPriceChanged;

  constructor(event: TldPriceChanged) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tldPrice(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TldRoyaltyChanged extends ethereum.Event {
  get params(): TldRoyaltyChanged__Params {
    return new TldRoyaltyChanged__Params(this);
  }
}

export class TldRoyaltyChanged__Params {
  _event: TldRoyaltyChanged;

  constructor(event: TldRoyaltyChanged) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tldRoyalty(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PunkTLD__domainsResult {
  value0: string;
  value1: BigInt;
  value2: Address;
  value3: string;

  constructor(value0: string, value1: BigInt, value2: Address, value3: string) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    return map;
  }

  getName(): string {
    return this.value0;
  }

  getTokenId(): BigInt {
    return this.value1;
  }

  getHolder(): Address {
    return this.value2;
  }

  getData(): string {
    return this.value3;
  }
}

export class PunkTLD extends ethereum.SmartContract {
  static bind(address: Address): PunkTLD {
    return new PunkTLD("PunkTLD", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  buyingEnabled(): boolean {
    let result = super.call("buyingEnabled", "buyingEnabled():(bool)", []);

    return result[0].toBoolean();
  }

  try_buyingEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall("buyingEnabled", "buyingEnabled():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  defaultNames(param0: Address): string {
    let result = super.call("defaultNames", "defaultNames(address):(string)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toString();
  }

  try_defaultNames(param0: Address): ethereum.CallResult<string> {
    let result = super.tryCall(
      "defaultNames",
      "defaultNames(address):(string)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  description(): string {
    let result = super.call("description", "description():(string)", []);

    return result[0].toString();
  }

  try_description(): ethereum.CallResult<string> {
    let result = super.tryCall("description", "description():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  domainIdsNames(param0: BigInt): string {
    let result = super.call(
      "domainIdsNames",
      "domainIdsNames(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toString();
  }

  try_domainIdsNames(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "domainIdsNames",
      "domainIdsNames(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  domains(param0: string): PunkTLD__domainsResult {
    let result = super.call(
      "domains",
      "domains(string):(string,uint256,address,string)",
      [ethereum.Value.fromString(param0)]
    );

    return new PunkTLD__domainsResult(
      result[0].toString(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toString()
    );
  }

  try_domains(param0: string): ethereum.CallResult<PunkTLD__domainsResult> {
    let result = super.tryCall(
      "domains",
      "domains(string):(string,uint256,address,string)",
      [ethereum.Value.fromString(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PunkTLD__domainsResult(
        value[0].toString(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toString()
      )
    );
  }

  factoryAddress(): Address {
    let result = super.call("factoryAddress", "factoryAddress():(address)", []);

    return result[0].toAddress();
  }

  try_factoryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "factoryAddress",
      "factoryAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDomainData(_domainName: string): string {
    let result = super.call("getDomainData", "getDomainData(string):(string)", [
      ethereum.Value.fromString(_domainName)
    ]);

    return result[0].toString();
  }

  try_getDomainData(_domainName: string): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getDomainData",
      "getDomainData(string):(string)",
      [ethereum.Value.fromString(_domainName)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getDomainHolder(_domainName: string): Address {
    let result = super.call(
      "getDomainHolder",
      "getDomainHolder(string):(address)",
      [ethereum.Value.fromString(_domainName)]
    );

    return result[0].toAddress();
  }

  try_getDomainHolder(_domainName: string): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getDomainHolder",
      "getDomainHolder(string):(address)",
      [ethereum.Value.fromString(_domainName)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getFactoryOwner(): Address {
    let result = super.call(
      "getFactoryOwner",
      "getFactoryOwner():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getFactoryOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getFactoryOwner",
      "getFactoryOwner():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nameMaxLength(): BigInt {
    let result = super.call("nameMaxLength", "nameMaxLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nameMaxLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nameMaxLength",
      "nameMaxLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  price(): BigInt {
    let result = super.call("price", "price():(uint256)", []);

    return result[0].toBigInt();
  }

  try_price(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("price", "price():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  referral(): BigInt {
    let result = super.call("referral", "referral():(uint256)", []);

    return result[0].toBigInt();
  }

  try_referral(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("referral", "referral():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  royalty(): BigInt {
    let result = super.call("royalty", "royalty():(uint256)", []);

    return result[0].toBigInt();
  }

  try_royalty(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("royalty", "royalty():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(_tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(_tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _tldOwner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _domainPrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _buyingEnabled(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }

  get _royalty(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _factoryAddress(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class ChangeDescriptionCall extends ethereum.Call {
  get inputs(): ChangeDescriptionCall__Inputs {
    return new ChangeDescriptionCall__Inputs(this);
  }

  get outputs(): ChangeDescriptionCall__Outputs {
    return new ChangeDescriptionCall__Outputs(this);
  }
}

export class ChangeDescriptionCall__Inputs {
  _call: ChangeDescriptionCall;

  constructor(call: ChangeDescriptionCall) {
    this._call = call;
  }

  get _description(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class ChangeDescriptionCall__Outputs {
  _call: ChangeDescriptionCall;

  constructor(call: ChangeDescriptionCall) {
    this._call = call;
  }
}

export class ChangeNameMaxLengthCall extends ethereum.Call {
  get inputs(): ChangeNameMaxLengthCall__Inputs {
    return new ChangeNameMaxLengthCall__Inputs(this);
  }

  get outputs(): ChangeNameMaxLengthCall__Outputs {
    return new ChangeNameMaxLengthCall__Outputs(this);
  }
}

export class ChangeNameMaxLengthCall__Inputs {
  _call: ChangeNameMaxLengthCall;

  constructor(call: ChangeNameMaxLengthCall) {
    this._call = call;
  }

  get _maxLength(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeNameMaxLengthCall__Outputs {
  _call: ChangeNameMaxLengthCall;

  constructor(call: ChangeNameMaxLengthCall) {
    this._call = call;
  }
}

export class ChangePriceCall extends ethereum.Call {
  get inputs(): ChangePriceCall__Inputs {
    return new ChangePriceCall__Inputs(this);
  }

  get outputs(): ChangePriceCall__Outputs {
    return new ChangePriceCall__Outputs(this);
  }
}

export class ChangePriceCall__Inputs {
  _call: ChangePriceCall;

  constructor(call: ChangePriceCall) {
    this._call = call;
  }

  get _price(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangePriceCall__Outputs {
  _call: ChangePriceCall;

  constructor(call: ChangePriceCall) {
    this._call = call;
  }
}

export class ChangeReferralFeeCall extends ethereum.Call {
  get inputs(): ChangeReferralFeeCall__Inputs {
    return new ChangeReferralFeeCall__Inputs(this);
  }

  get outputs(): ChangeReferralFeeCall__Outputs {
    return new ChangeReferralFeeCall__Outputs(this);
  }
}

export class ChangeReferralFeeCall__Inputs {
  _call: ChangeReferralFeeCall;

  constructor(call: ChangeReferralFeeCall) {
    this._call = call;
  }

  get _referral(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeReferralFeeCall__Outputs {
  _call: ChangeReferralFeeCall;

  constructor(call: ChangeReferralFeeCall) {
    this._call = call;
  }
}

export class ChangeRoyaltyCall extends ethereum.Call {
  get inputs(): ChangeRoyaltyCall__Inputs {
    return new ChangeRoyaltyCall__Inputs(this);
  }

  get outputs(): ChangeRoyaltyCall__Outputs {
    return new ChangeRoyaltyCall__Outputs(this);
  }
}

export class ChangeRoyaltyCall__Inputs {
  _call: ChangeRoyaltyCall;

  constructor(call: ChangeRoyaltyCall) {
    this._call = call;
  }

  get _royalty(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeRoyaltyCall__Outputs {
  _call: ChangeRoyaltyCall;

  constructor(call: ChangeRoyaltyCall) {
    this._call = call;
  }
}

export class EditDataCall extends ethereum.Call {
  get inputs(): EditDataCall__Inputs {
    return new EditDataCall__Inputs(this);
  }

  get outputs(): EditDataCall__Outputs {
    return new EditDataCall__Outputs(this);
  }
}

export class EditDataCall__Inputs {
  _call: EditDataCall;

  constructor(call: EditDataCall) {
    this._call = call;
  }

  get _domainName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _data(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class EditDataCall__Outputs {
  _call: EditDataCall;

  constructor(call: EditDataCall) {
    this._call = call;
  }
}

export class EditDefaultDomainCall extends ethereum.Call {
  get inputs(): EditDefaultDomainCall__Inputs {
    return new EditDefaultDomainCall__Inputs(this);
  }

  get outputs(): EditDefaultDomainCall__Outputs {
    return new EditDefaultDomainCall__Outputs(this);
  }
}

export class EditDefaultDomainCall__Inputs {
  _call: EditDefaultDomainCall;

  constructor(call: EditDefaultDomainCall) {
    this._call = call;
  }

  get _domainName(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class EditDefaultDomainCall__Outputs {
  _call: EditDefaultDomainCall;

  constructor(call: EditDefaultDomainCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get _domainName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _domainHolder(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _referrer(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class ToggleBuyingDomainsCall extends ethereum.Call {
  get inputs(): ToggleBuyingDomainsCall__Inputs {
    return new ToggleBuyingDomainsCall__Inputs(this);
  }

  get outputs(): ToggleBuyingDomainsCall__Outputs {
    return new ToggleBuyingDomainsCall__Outputs(this);
  }
}

export class ToggleBuyingDomainsCall__Inputs {
  _call: ToggleBuyingDomainsCall;

  constructor(call: ToggleBuyingDomainsCall) {
    this._call = call;
  }
}

export class ToggleBuyingDomainsCall__Outputs {
  _call: ToggleBuyingDomainsCall;

  constructor(call: ToggleBuyingDomainsCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
